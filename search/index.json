[{"content":"","href":"/posts/","title":"Posts"},{"content":"","href":"/","title":"Home"},{"content":"","href":"/categories/","title":"Categories"},{"content":"","href":"/tags/","title":"Tags"},{"content":"","href":"/about/","title":"About"},{"content":"","href":"/archives/","title":"Archives"},{"content":"","href":"/tags/fabric/","title":"fabric"},{"content":"fabric升级到fabric2 fabric2相比于fabric改动很多，并且不能向下兼容\n安装 可以用pip安装fabric的2.X版本，也可以安装fabric2，都是一样的，用fabric2为了区分之前的版本，fabric2改动特别大\nfabric=\u0026gt;fabric2 改动 完整改动还是得看官网文档Upgrading from 1.x，这里只列举部分我常用的\nenv 移除了env，使用fabric.Config来进行配置\nenv.use_ssh_config不再需要，fabric2默认就会使用ssh_config\nsudo密码 之前用env.password来配置sudo的密码，现在可以用\n方法1 使用全局的connection，并配置config sudo_pass = \u0026#39;xxxxxx\u0026#39; fab_user = \u0026#39;xudai\u0026#39; config = Config(overrides={\u0026#39;sudo\u0026#39;: {\u0026#39;password\u0026#39;: sudo_pass}}) c = Connection(host=\u0026#39;xd\u0026#39;, config=config) @task def sample(ctx): c.sudo(\u0026#39;whoami\u0026#39;) 方法2 执行时修改config @task def sample(ctx): print(ctx.config) sudo(ctx) print(ctx.config) def sudo(ctx): ctx.config.sudo.password = sudo_pass 方法3 给sudo传参 @task def sample(c): c.sudo(\u0026#39;whoami\u0026#39;, password=os.environ.get(\u0026#39;SUDO_PASSWORD\u0026#39;)) 方法4 \u0026ndash;prompt-for-sudo-password 执行时加上这个参数，会让你先在命令行输入一次sudo password\n方法5 配置config文件 run/local/sudo # fabric 1.X from fabric.api import ( local, run, sudo, ) local(\u0026#39;cmd\u0026#39;) run(\u0026#39;cmd\u0026#39;) sudo(\u0026#39;cmd\u0026#39;) # fabric 2.X from fabric.connection import Connection c = Connection(host=\u0026#39;xd\u0026#39;) c.local(\u0026#39;cmd\u0026#39;) c.run(\u0026#39;cmd\u0026#39;) c.sudo(\u0026#39;cmd\u0026#39;) fabric.contrib fabric.contrib也移除了，现在用patchwork，可以用pip安装\nfiles.exists 需要传connection参数\n# fabric 1.X from fabric.contrib import files def init_dir(): if not files.exists(DIR_FEISHUBOT): create_dir(DIR_FEISHUBOT) # fabric 2.X from patchwork import files def init_dir(ctx): if not files.exists(c, DIR_FEISHUBOT): create_dir(ctx, DIR_FEISHUBOT) rsync 参数名字有点不同，并且需要传connection参数\n# fabric 1.X from fabric.contrib.project import rsync_project def deploy_bin(): rsync_project(remote_dir=REMOTE_BIN, local_dir=LOCAL_BIN, exclude=[\u0026#39;.git\u0026#39;, \u0026#39;*.pyc\u0026#39;, \u0026#39;__pycache__\u0026#39;, \u0026#39;.vscode\u0026#39;, \u0026#39;.idea\u0026#39;, \u0026#39;*.xls\u0026#39;, \u0026#39;.DS_Store\u0026#39;], ssh_opts=\u0026#39;-i ~/.ssh/id_rsa\u0026#39;) # fabric 2.X from patchwork.transfers import rsync def deploy_bin(ctx): rsync(c, target=REMOTE_BIN, source=LOCAL_BIN, exclude=[\u0026#39;.git\u0026#39;, \u0026#39;*.pyc\u0026#39;, \u0026#39;__pycache__\u0026#39;, \u0026#39;.vscode\u0026#39;, \u0026#39;.idea\u0026#39;, \u0026#39;*.xls\u0026#39;, \u0026#39;.DS_Store\u0026#39;], rsync_opts=\u0026#39;-O\u0026#39;, ssh_opts=\u0026#39;-i ~/.ssh/id_rsa\u0026#39;) task 之前fabric只需要fabfile定义一个函数就可以被识别成fab任务，现在fabric2必须要给函数加上task装饰器才会被识别成fab任务，并且必须有一个connection参数，通常用c/ctx就行\nfrom fabric import task @task def sample(ctx): print(ctx.config) 如果task函数名字带有_，使用的时候要用-，用fab --list可以看到\n@task def test_sample(ctx): print(ctx.config) $ fab test-sample fabric2必须指定shell 如果用的不是bash，例如zsh，执行的指令前面需要加上/bin/zsh -c指定shell，否则即使当前用的zsh，执行的时候还是会用bash，一些zshrc配置的东西就找不到\n# fabric 1.X COMMAND_BUILD_FEISHUBOT = \u0026#39;GOOS=linux GOARCH=amd64 go build -o bin/feishubot -v main.go\u0026#39; # fabric 2.X COMMAND_BUILD_FEISHUBOT = \u0026#39;/bin/zsh -c \u0026#34;GOOS=linux GOARCH=amd64 /usr/local/go/bin/go build -o bin/feishubot -v main.go\u0026#34;\u0026#39; 命令行参数 之前传参用:，现在用GNU/POSIX-style long and short flags\n# fabric 1.X $ fab deploy:arg1,arg2 # fabric 2.X # def deploy(ctx, prefix, postfix) $ fab deploy --prefix=arg1 --postfix=arg2 # 可以用首字母p就行，而且即使有多个参数都是p开头的，会按顺序读取 $ fab deploy --p=arg1 --p=arg2 命令行指定服务器 # fabric 1.X # 之前通过定义一个set_svr(svr)的函数接收服务器名然后设置env.host $ fab set_svr:xj deploy # fabric 2.X # 现在可以直接用-H来指定ssh_config配置的服务器 $ fab -H xj deploy fabric 1.X的例子 #!/usr/bin/env/python # -*-coding:utf-8 -*- from os import getenv from fabric.api import ( local, env, run, sudo, ) from fabric.contrib.project import rsync_project from fabric.contrib import files env.use_ssh_config = True LOCAL_BIN = \u0026#39;bin/\u0026#39; LOCAL_CONF = \u0026#39;conf/feishubot.yaml\u0026#39; LOCAL_SUPERVISOR_CONF = \u0026#39;conf/feishubot.conf\u0026#39; REMOTE_BIN = \u0026#39;/data/qa/feishubot/bin\u0026#39; REMOTE_CONF = \u0026#39;/data/qa/feishubot/conf/feishubot.yaml\u0026#39; TEMP_SUPERVISOR_CONF = \u0026#39;/data/qa/feishubot/feishubot.conf\u0026#39; REMOTE_SUPERVISOR_CONF = \u0026#39;/etc/supervisor/conf.d/\u0026#39; COMMAND_BUILD_FEISHUBOT = \u0026#39;GOOS=linux GOARCH=amd64 go build -o bin/feishubot -v main.go\u0026#39; DIR_FEISHUBOT = \u0026#39;/data/qa/feishubot\u0026#39; DIR_BIN = \u0026#39;/data/qa/feishubot/bin\u0026#39; DIR_CONF = \u0026#39;/data/qa/feishubot/conf\u0026#39; DIR_LOG = \u0026#39;/data/qa/log/feishubot\u0026#39; env.hosts = \u0026#39;xj\u0026#39; env.gateway = getenv(\u0026#34;USER\u0026#34;) + \u0026#39;@xj.tiaoban.badam.mobi\u0026#39; env.password = \u0026#39;xxxxxx\u0026#39; # 配置password执行sudo就不用输入密码了 def get_remote_dir(): return REMOTE_BIN def create_dir(path): run(\u0026#39;mkdir %s\u0026#39; % path) def init_dir(): if not files.exists(DIR_FEISHUBOT): create_dir(DIR_FEISHUBOT) if not files.exists(DIR_BIN): create_dir(DIR_BIN) if not files.exists(DIR_CONF): create_dir(DIR_CONF) if not files.exists(DIR_LOG): create_dir(DIR_LOG) def deploy(): deploy_bin() def deploy_bin(): rsync_project(remote_dir=REMOTE_BIN, local_dir=LOCAL_BIN, exclude=[\u0026#39;.git\u0026#39;, \u0026#39;*.pyc\u0026#39;, \u0026#39;__pycache__\u0026#39;, \u0026#39;.vscode\u0026#39;, \u0026#39;.idea\u0026#39;, \u0026#39;*.xls\u0026#39;, \u0026#39;.DS_Store\u0026#39;], ssh_opts=\u0026#39;-i ~/.ssh/id_rsa\u0026#39;) def deploy_conf(): rsync_project(remote_dir=REMOTE_CONF, local_dir=LOCAL_CONF, exclude=[\u0026#39;.git\u0026#39;, \u0026#39;*.pyc\u0026#39;, \u0026#39;__pycache__\u0026#39;, \u0026#39;.vscode\u0026#39;, \u0026#39;.idea\u0026#39;, \u0026#39;*.xls\u0026#39;, \u0026#39;.DS_Store\u0026#39;], ssh_opts=\u0026#39;-i ~/.ssh/id_rsa\u0026#39;) def deploy_supervisor(): rsync_project(remote_dir=TEMP_SUPERVISOR_CONF, local_dir=LOCAL_SUPERVISOR_CONF, exclude=[\u0026#39;.git\u0026#39;, \u0026#39;*.pyc\u0026#39;, \u0026#39;__pycache__\u0026#39;, \u0026#39;.vscode\u0026#39;, \u0026#39;.idea\u0026#39;, \u0026#39;*.xls\u0026#39;, \u0026#39;.DS_Store\u0026#39;], ssh_opts=\u0026#39;-i ~/.ssh/id_rsa\u0026#39;) sudo(\u0026#39;mv %s%s\u0026#39; % (TEMP_SUPERVISOR_CONF, REMOTE_SUPERVISOR_CONF)) def restart_feishubot(): sudo(\u0026#39;supervisorctl restart feishubot\u0026#39;) def build_feishubot(): local(COMMAND_BUILD_FEISHUBOT) def update_supervisor(): sudo(\u0026#39;supervisorctl update\u0026#39;) def clean_qrpics(): sudo(\u0026#39;rm /data/qa/feishubot/pic/*.png\u0026#39;) def init(): build_feishubot() init_dir() deploy() deploy_conf() deploy_supervisor() update_supervisor() def feishu(): build_feishubot() deploy() deploy_conf() restart_feishubot() fabric 2.X的例子 #!/usr/bin/env/python # -*-coding:utf-8 -*- from fabric import task, Config from fabric.connection import Connection from patchwork import files from patchwork.transfers import rsync sudo_pass = \u0026#39;xxxxxx\u0026#39; fab_user = \u0026#39;xudai\u0026#39; config = Config(overrides={\u0026#39;sudo\u0026#39;: {\u0026#39;password\u0026#39;: sudo_pass}}) c = Connection(host=\u0026#39;xd\u0026#39;, config=config) LOCAL_BIN = \u0026#39;bin/\u0026#39; LOCAL_CONF = \u0026#39;conf/feishubot.yaml\u0026#39; LOCAL_SUPERVISOR_CONF = \u0026#39;conf/feishubot.conf\u0026#39; REMOTE_BIN = \u0026#39;/usr/share/feishubot/bin\u0026#39; REMOTE_CONF = \u0026#39;/usr/share/feishubot/conf/feishubot.yaml\u0026#39; TEMP_SUPERVISOR_CONF = \u0026#39;/usr/share/feishubot/feishubot.conf\u0026#39; REMOTE_SUPERVISOR_CONF = \u0026#39;/etc/supervisor/conf.d/\u0026#39; COMMAND_BUILD_FEISHUBOT = \u0026#39;/bin/zsh -c \u0026#34;GOOS=linux GOARCH=amd64 /usr/local/go/bin/go build -o bin/feishubot -v main.go\u0026#34;\u0026#39; DIR_FEISHUBOT = \u0026#39;/usr/share/feishubot\u0026#39; DIR_BIN = \u0026#39;/usr/share/feishubot/bin\u0026#39; DIR_CONF = \u0026#39;/usr/share/feishubot/conf\u0026#39; DIR_LOG = \u0026#39;/var/log/feishubot\u0026#39; @task def create_dir(ctx, path): # need root permission c.sudo(\u0026#39;mkdir %s\u0026#39; % path) # The rsync command should be done by the same user as the folder owner\u0026#39;s one c.sudo(\u0026#39;chown -R %s%s\u0026#39; % (fab_user, path)) @task def init_dir(ctx): if not files.exists(c, DIR_FEISHUBOT): create_dir(ctx, DIR_FEISHUBOT) if not files.exists(c, DIR_BIN): create_dir(ctx, DIR_BIN) if not files.exists(c, DIR_CONF): create_dir(ctx, DIR_CONF) if not files.exists(c, DIR_LOG): create_dir(ctx, DIR_LOG) @task def deploy(ctx): deploy_bin(ctx) deploy_conf(ctx) @task def deploy_bin(ctx): rsync(c, target=REMOTE_BIN, source=LOCAL_BIN, exclude=[\u0026#39;.git\u0026#39;, \u0026#39;*.pyc\u0026#39;, \u0026#39;__pycache__\u0026#39;, \u0026#39;.vscode\u0026#39;, \u0026#39;.idea\u0026#39;, \u0026#39;*.xls\u0026#39;, \u0026#39;.DS_Store\u0026#39;], rsync_opts=\u0026#39;-O\u0026#39;, ssh_opts=\u0026#39;-i ~/.ssh/id_rsa\u0026#39;) @task def deploy_conf(ctx): rsync(c, target=REMOTE_CONF, source=LOCAL_CONF, exclude=[\u0026#39;.git\u0026#39;, \u0026#39;*.pyc\u0026#39;, \u0026#39;__pycache__\u0026#39;, \u0026#39;.vscode\u0026#39;, \u0026#39;.idea\u0026#39;, \u0026#39;*.xls\u0026#39;, \u0026#39;.DS_Store\u0026#39;], rsync_opts=\u0026#39;-O\u0026#39;, ssh_opts=\u0026#39;-i ~/.ssh/id_rsa\u0026#39;) @task def deploy_supervisor(ctx): rsync(c, target=TEMP_SUPERVISOR_CONF, source=LOCAL_SUPERVISOR_CONF, exclude=[\u0026#39;.git\u0026#39;, \u0026#39;*.pyc\u0026#39;, \u0026#39;__pycache__\u0026#39;, \u0026#39;.vscode\u0026#39;, \u0026#39;.idea\u0026#39;, \u0026#39;*.xls\u0026#39;, \u0026#39;.DS_Store\u0026#39;], rsync_opts=\u0026#39;-O\u0026#39;, ssh_opts=\u0026#39;-i ~/.ssh/id_rsa\u0026#39;) c.sudo(\u0026#39;mv %s%s\u0026#39; % (TEMP_SUPERVISOR_CONF, REMOTE_SUPERVISOR_CONF)) @task def restart_feishubot(ctx): c.sudo(\u0026#39;supervisorctl restart feishubot\u0026#39;) def get_config(svr): if svr == \u0026#39;xd\u0026#39;: return Config(overrides={\u0026#39;sudo\u0026#39;: {\u0026#39;password\u0026#39;: \u0026#39;admin123\u0026#39;}}) else: return Config(overrides={\u0026#39;sudo\u0026#39;: {\u0026#39;password\u0026#39;: \u0026#39;zp#14@SVR\u0026#39;}}) @task def build(ctx): c.local(COMMAND_BUILD_FEISHUBOT) @task def update_supervisor(ctx): c.sudo(\u0026#39;supervisorctl update\u0026#39;) @task def init(ctx): build(ctx) init_dir(ctx) deploy(ctx) deploy_conf(ctx) deploy_supervisor(ctx) update_supervisor(ctx) @task def feishu(ctx): build(ctx) deploy(ctx) restart_feishubot(ctx) ","href":"/posts/fabric%E5%8D%87%E7%BA%A7%E5%88%B0fabric2/","title":"Fabric升级到fabric2"},{"content":"","href":"/tags/python/","title":"python"},{"content":"","href":"/categories/python/","title":"python"},{"content":"","href":"/tags/blog/","title":"blog"},{"content":"","href":"/tags/hugo/","title":"hugo"},{"content":"","href":"/categories/tools/","title":"tools"},{"content":"使用hugo搭建blog Install MacOS下安装 $ brew install hugo Usage 新建项目 $ hugo new site $your_blog_name 安装主题 $ cd $your_blog_name $ git init # 作为子模块方便管理和更新 $ git submodule add https://github.com/MunifTanjim/minimo.git themes/minimo 如果之后有对主题进行自定义修改，又想忽略掉这个子模块的git变动，可以修改.gitmodule文件，加上ignore = dirty，不过hugo只需要在根目录的文件夹创建和主题同路径同名的文件就可以覆盖并生效，所以不需要修改主题的模板文件\n[submodule \u0026quot;themes/minimo\u0026quot;] path = themes/minimo url = https://github.com/MunifTanjim/minimo ignore = dirty minimo主题配置 # 如果要使用某个主题，最好使用该主题的example的配置，再在上面进行修改定制 $ cp themes/minimo/exampleSite/config.toml . # staticman是用来给静态网站增加评论功能的，如果要用评论功能需要配置这个 $ cp themes/minimo/exampleSite/staticman.toml . # 为了省事直接把这两个也先copy过来了 $ cp -r themes/minimo/exampleSite/content . $ cp -r themes/minimo/exampleSite/data . 如果要在上方的菜单栏配置posts/categories/tags，可以在content目录下新建对应文件夹，之后创建一个_index.md的文件，添加下面的内容\n--- date: 2017-09-28T08:00:00+06:00 title: Posts linkTitle: Posts slug: posts menu: main weight: -290 --- 添加百度统计 在head模板的\u0026lt;/head\u0026gt;标签之前放入百度统计生成的\u0026lt;script\u0026gt;...\u0026lt;/script\u0026gt;代码就行了\n# minimo主题的head模板文件是这个/themes/minimo/layouts/partials/head/head.html $ mkdir -p layouts/partials/head/ $ cp themes/minimo/layouts/partials/head/head.html layouts/partials/head/head.html $ vim layouts/partials/head/head.html 创建文章 一定要加上.md后缀\n$ hugo new posts/first_blog.md 调试 可以先在本地进行调试看看效果，执行之后在localhost:1313就可以访问了\n$ hugo server -D 生成静态网站 执行这条指令之后就会生成一个public文件夹，静态的网站就在这里面\n$ hugo -D 上传到Github Pages 新建GitHub仓库 先在GitHub上创建两个repo，一个存放原始hugo项目的，另一个是存放github pages静态网页文件的，repo名字格式必须是xudai3.github.io这样，把public文件夹下的生成的静态网页文件上传之后到这个仓库之后就可以访问https://xudai3.github.io了\n手动上传到GitHub 可以在hugo项目目录下的.gitignore里把public文件夹忽略掉，然后git submodule add -f git@github.com:xudai3/xudai3.github.io.git public把public作为一个git子模块分开管理\n如果之前生成过public文件夹，执行这个之前要先删除掉public文件夹否则执行不了\n还有因为之前被忽略了，要加上-f强制执行才能执行成功\n之后就按照正常的git上传流程就行了\nhugo集成Travis CI 之前两个仓库分开管理比较麻烦，可以通过Travis CI管理blog项目，检测到更新后自动生成静态网页文件上传到\nxudai3.github.io\n生成GitHub token GitHub-\u0026gt;Settings-\u0026gt;Developer Settings-\u0026gt;Personal access tokens或者直接访问https://github.com/settings/tokens\n然后点击generate new token，勾选public_repo, repo:status, repo_deployment这三个权限就够了\n配置travis ci 访问https://travis-ci.org/，点击右上角登陆，选择GitHub账号登陆，选择需要监听的GitHub仓库\n选择blog项目之后，点击setting，配置一个环境变量GITHUB_TOKEN，value填刚才生成的GitHub token，之后编写.travis.yml的时候就可以使用这个变量\n编写.travis.yml # 需要先下载安装hugo install: - wget https://github.com/gohugoio/hugo/releases/download/v0.76.3/hugo_0.76.3_Linux-64bit.deb - sudo dpkg -i hugo*.deb - hugo version before_script: - git config --global user.name \u0026#34;xudai3\u0026#34; - git config --global user.email \u0026#34;xudai3@qq.com\u0026#34; # 指定要执行的脚本 script: - hugo -D # 先clone下来清空非隐藏文件，在把新生成的public文件内容复制进去，这样可以保留commit记录 after_success: - git clone https://${GITHUB_TOKEN}@github.com/xudai3/xudai3.github.io.git container - rm -rf container/* - cp -r public/* container - cd container - git add . - git commit -m \u0026#34;Travis update blog\u0026#34; - git push -u origin master -f 上传到blog仓库 之后每次push到blog仓库之后就会触发Travis了\n","href":"/posts/hugo-build-blog/","title":"使用hugo搭建blog"},{"content":"","href":"/authors/","title":"Authors"},{"content":"","href":"/tags/config/","title":"Configuration"},{"content":"","href":"/tags/og/","title":"Opengraph"},{"content":"","href":"/page/","title":"Pages"},{"content":"","href":"/search/","title":"Search"},{"content":"","href":"/series/","title":"Series"}]
